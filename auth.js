const express = require("express");
const router = express.Router();
const multer = require("multer");
const path = require("path");
const nodemailer = require("nodemailer");
const bcrypt = require("bcryptjs");
const crypto = require("crypto");
const jwt = require("jsonwebtoken");

require("dotenv").config();

const User = require("../models/User");

// ‚úÖ –§–æ—Ç–æ —Å–∞“õ—Ç–∞—É
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, "uploads/");
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    cb(null, uniqueSuffix + path.extname(file.originalname));
  },
});
const upload = multer({ storage });

// ‚úÖ Nodemailer transporter
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// ‚úÖ –¢—ñ—Ä–∫–µ–ª—É
router.post("/register", upload.single("photo"), async (req, res) => {
  try {
    const {
      fullName,
      email,
      password,
      organization,
      specialty,
      experience,
      grade,
      teacher,
      gender,
      birthdate,
      role,
    } = req.body;

    const photo = req.file ? req.file.filename : null;

    // –ü–æ—á—Ç–∞ –±“±—Ä—ã–Ω —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω –±–µ?
    const existing = await User.findOne({ email });
    if (existing)
      return res.status(400).json({ message: "–ë“±–ª –ø–æ—á—Ç–∞ –±“±—Ä—ã–Ω “õ–æ–ª–¥–∞–Ω—ã–ª“ì–∞–Ω." });

    // ‚úÖ –†–∞—Å—Ç–∞—É —Ç–æ–∫–µ–Ω—ñ
    const emailVerificationToken = crypto.randomBytes(32).toString("hex");
    const hashedPassword = await bcrypt.hash(password, 10);

    // ‚úÖ –ñ–∞“£–∞ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã
    const newUser = new User({
      fullName,
      email,
      password: hashedPassword,
      organization,
      specialty,
      experience,
      grade,
      teacher,
      gender,
      birthDate: birthdate,
      role,
      photo,
      emailVerificationToken,
      emailVerified: false,
    });

    await newUser.save();

    // ‚úÖ –°—ñ–ª—Ç–µ–º–µ –∂–∞—Å–∞—É
    const verificationLink = `${process.env.CLIENT_URL}/verify/${emailVerificationToken}`;

    // üìß –ü–æ—à—Ç–∞ –∂—ñ–±–µ—Ä—É
    await transporter.sendMail({
      from: `"Action Research" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: "–ü–æ—à—Ç–∞“£—ã–∑–¥—ã —Ä–∞—Å—Ç–∞“£—ã–∑",
      html: `
        <p>–°”ô–ª–µ–º, ${fullName}!</p>
        <p>–¢—ñ—Ä–∫–µ—É–¥—ñ –∞—è“õ—Ç–∞—É “Ø—à—ñ–Ω –º—ã–Ω–∞ —Å—ñ–ª—Ç–µ–º–µ–Ω—ñ –±–∞—Å—ã“£—ã–∑:</p>
        <a href="${verificationLink}">${verificationLink}</a>
      `,
    });

    console.log("‚úÖ –†–∞—Å—Ç–∞—É —Å—ñ–ª—Ç–µ–º–µ—Å—ñ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ:", verificationLink);
    res
      .status(201)
      .json({ message: "–ü–æ—à—Ç–∞“£—ã–∑–¥—ã —Ä–∞—Å—Ç–∞“£—ã–∑! –°—ñ–ª—Ç–µ–º–µ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ." });
  } catch (error) {
    console.error("‚ùå –¢—ñ—Ä–∫–µ–ª—É “õ–∞—Ç–µ—Å—ñ:", error);
    res.status(500).json({ message: "–¢—ñ—Ä–∫–µ–ª—É —Å”ô—Ç—Å—ñ–∑ –∞—è“õ—Ç–∞–ª–¥—ã." });
  }
});

// ‚úÖ –†–∞—Å—Ç–∞—É
// ‚úÖ –†–∞—Å—Ç–∞—É
router.get('/verify/:token', async (req, res) => {
  try {
    const token = req.params.token;
    console.log("–¢“Ø—Å–∫–µ–Ω token:", token); 
    const user = await User.findOne({ emailVerificationToken: token });

    if (!user) {
      console.log("–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã.");
      return res.status(400).json({ message: '–°—ñ–ª—Ç–µ–º–µ –∂–∞—Ä–∞–º—Å—ã–∑ –Ω–µ–º–µ—Å–µ “õ–∞—Ç–µ.' });
    }
     console.log("–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã:", user.email);

    user.emailVerified = true;
    user.emailVerificationToken = null;
    await user.save();

    return res.status(200).json({ message: "–ü–æ—à—Ç–∞ —Å”ô—Ç—Ç—ñ —Ä–∞—Å—Ç–∞–ª–¥—ã!" });
  } catch (error) {
    console.error(error);
    res.status(500).send("–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ.");
  }
});

router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;

    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã." });
    }

    if (!user.emailVerified) {
      return res.status(403).json({ message: "–ü–æ—à—Ç–∞ —Ä–∞—Å—Ç–∞–ª–º–∞“ì–∞–Ω. –ê–ª–¥—ã–º–µ–Ω —Ä–∞—Å—Ç–∞“£—ã–∑." });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ message: "“ö“±–ø–∏—è—Å”©–∑ “õ–∞—Ç–µ." });
    }

    // ‚úÖ JWT —Ç–æ–∫–µ–Ω –∂–∞—Å–∞—É
    const token = jwt.sign(
      { id: user._id, role: user.role },
      process.env.JWT_SECRET, // üëà .env —ñ—à—ñ–Ω–¥–µ–≥—ñ “õ“±–ø–∏—è —Å”©–∑
      { expiresIn: "1h" }
    );

    // ‚úÖ –ú–Ü–ù–ï –û–°–´ –ö–ï–†–ï–ö:
    res.status(200).json({
      message: "–ö—ñ—Ä—É —Å”ô—Ç—Ç—ñ!",
      token, // üëà —Ç–æ–∫–µ–Ω “õ–∞–π—Ç—ã–ø –∂–∞—Ç—ã—Ä –º–∞?
      user
    });

  } catch (error) {
    console.error("–ö—ñ—Ä—É “õ–∞—Ç–µ—Å—ñ:", error);
    res.status(500).json({ message: "–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ." });
  }
});

// ‚úÖ “ö“±–ø–∏—è—Å”©–∑–¥—ñ “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É “Ø—à—ñ–Ω —Ç–æ–∫–µ–Ω –∂–∞—Å–∞—É
router.post("/ForgotPassword", async (req, res) => {
  const { email } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user)
      return res.status(404).json({ message: "–ú“±–Ω–¥–∞–π –ø–æ—á—Ç–∞ —Ç–∞–±—ã–ª–º–∞–¥—ã." });

    // “ö–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É —Ç–æ–∫–µ–Ω—ñ –∂–∞—Å–∞—É
    const resetToken = crypto.randomBytes(32).toString("hex");
    user.resetPasswordToken = resetToken;
    user.resetPasswordExpires = Date.now() + 3600000; // 1 —Å–∞“ì–∞—Ç
    await user.save();

    const resetLink = `${process.env.CLIENT_URL}/ResetPassword/${resetToken}`;

    await transporter.sendMail({
      from: `"Action Research" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: "“ö“±–ø–∏—è—Å”©–∑–¥—ñ “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É",
      html: `
        <p>–°”ô–ª–µ–º, ${user.fullName}!</p>
        <p>“ö“±–ø–∏—è—Å”©–∑—ñ“£—ñ–∑–¥—ñ –∂–∞“£–∞—Ä—Ç—É “Ø—à—ñ–Ω –º—ã–Ω–∞ —Å—ñ–ª—Ç–µ–º–µ–≥–µ ”©—Ç—ñ“£—ñ–∑:</p>
        <a href="${resetLink}">${resetLink}</a>
        <p>–ë“±–ª —Å—ñ–ª—Ç–µ–º–µ 1 —Å–∞“ì–∞—Ç“õ–∞ “ì–∞–Ω–∞ –∂–∞—Ä–∞–º–¥—ã.</p>
      `,
    });

    res.status(200).json({ message: "“ö–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É —Å—ñ–ª—Ç–µ–º–µ—Å—ñ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ." });
  } catch (error) {
    console.error("“ö–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É “õ–∞—Ç–µ—Å—ñ:", error);
    res.status(500).json({ message: "–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ." });
  }
});

// ‚úÖ “ö“±–ø–∏—è—Å”©–∑–¥—ñ –∂–∞“£–∞—Ä—Ç—É (—Ç–æ–∫–µ–Ω –∞—Ä“õ—ã–ª—ã)
router.post("/reset-password/:token", async (req, res) => {
  const { token } = req.params;
  const { newPassword } = req.body;

  try {
    const user = await User.findOne({
      resetPasswordToken: token,
      resetPasswordExpires: { $gt: Date.now() }, // –∂–∞—Ä–∞–º–¥—ã–ª—ã“õ —Ç–µ–∫—Å–µ—Ä—É
    });

    if (!user) {
      return res.status(400).json({ message: "–°—ñ–ª—Ç–µ–º–µ –∂–∞—Ä–∞–º—Å—ã–∑ –Ω–µ–º–µ—Å–µ –º–µ—Ä–∑—ñ–º—ñ ”©—Ç–∫–µ–Ω." });
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    user.resetPasswordToken = undefined;
    user.resetPasswordExpires = undefined;

    await user.save();

    res.status(200).json({ message: "“ö“±–ø–∏—è—Å”©–∑ —Å”ô—Ç—Ç—ñ –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã." });
  } catch (error) {
    console.error("“ö“±–ø–∏—è—Å”©–∑ –∂–∞“£–∞—Ä—Ç—É “õ–∞—Ç–µ—Å—ñ:", error);
    res.status(500).json({ message: "–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ." });
  }
});

module.exports = router;