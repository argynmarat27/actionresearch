const express = require("express");
const router = express.Router();
const User = require("../models/User");
const crypto = require("crypto");
const nodemailer = require("nodemailer");
const researchRoutes = require("./routes/research");

app.use("/api/research", researchRoutes);

// üîê –õ–û–ì–ò–ù –ú–ê–†–®–†–£–¢–´
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;

    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ message: "Email —Ç–∞–±—ã–ª–º–∞–¥—ã" });

    if (!user.isVerified) {
      return res.status(401).json({ message: "Email —Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç" });
    }

    if (user.password !== password) {
      return res.status(400).json({ message: "“ö“±–ø–∏—è—Å”©–∑ “õ–∞—Ç–µ" });
    }

    res.status(200).json({ message: "–ö—ñ—Ä—É —Å”ô—Ç—Ç—ñ", user });
  } catch (error) {
    res.status(500).json({ message: "–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ", error });
  }
});


// ‚úâÔ∏è “ö“±–ø–∏—è—Å”©–∑–¥—ñ “±–º—ã—Ç—É ‚Äî /forgot-password
router.post("/forgot-password", async (req, res) => {
  const { email } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ message: "“ö–æ–ª–¥–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã" });

    const token = crypto.randomBytes(32).toString("hex");
    user.resetToken = token;
    user.resetTokenExpire = Date.now() + 3600000; // 1 —Å–∞“ì–∞—Ç
    await user.save();

    const resetLink = `http://localhost:5173/resetPassword/${token}`;

    // –ë“±–ª —Ç–µ–∫ —Ç–µ—Å—Ç “Ø—à—ñ–Ω ‚Äî –Ω–∞“õ—Ç—ã SMTP “õ–æ–ª–¥–∞–Ω—É –∫–µ—Ä–µ–∫
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: "argynmarat27@gmail.com", // ”©–∑ email-—ñ“£
        pass: "aovt zzhl ukgg cyoz", // App Password “õ–æ–ª–¥–∞–Ω
      },
    });

    await transporter.sendMail({
      from: "–°–∞–π—Ç “ö–æ–ª–¥–∞—É—ã <youremail@gmail.com>",
      to: user.email,
      subject: "“ö“±–ø–∏—è—Å”©–∑–¥—ñ “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É",
      html: `<p>“ö“±–ø–∏—è—Å”©–∑–¥—ñ ”©–∑–≥–µ—Ä—Ç—É “Ø—à—ñ–Ω –º—ã–Ω–∞ —Å—ñ–ª—Ç–µ–º–µ–≥–µ ”©—Ç—ñ“£—ñ–∑:</p><a href="${resetLink}">${resetLink}</a>`,
    });

    res.json({ message: "“ö–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É —Å—ñ–ª—Ç–µ–º–µ—Å—ñ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ" });
  } catch (err) {
    console.error("“ö–∞—Ç–µ:", err);
    res.status(500).json({ message: "“ö–∞—Ç–µ –±–æ–ª–¥—ã" });
  }
});


// üîÅ –ñ–∞“£–∞ “õ“±–ø–∏—è—Å”©–∑–¥—ñ –æ—Ä–Ω–∞—Ç—É ‚Äî /reset-password/:token
router.post("/reset-password/:token", async (req, res) => {
  const { token } = req.params;
  const { password } = req.body;

  try {
    const user = await User.findOne({
      resetToken: token,
      resetTokenExpire: { $gt: Date.now() },
    });

    if (!user) return res.status(400).json({ message: "–¢–æ–∫–µ–Ω –∂–∞—Ä–∞–º—Å—ã–∑ –Ω–µ–º–µ—Å–µ –µ—Å–∫—ñ—Ä–≥–µ–Ω" });

    user.password = password;
    user.resetToken = undefined;
    user.resetTokenExpire = undefined;
    await user.save();

    res.json({ message: "“ö“±–ø–∏—è—Å”©–∑ —Å”ô—Ç—Ç—ñ –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã" });
  } catch (err) {
    res.status(500).json({ message: "“ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã" });
  }
});


module.exports = router;
